/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.7.1/samples
 */
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerinax - Ballerina based Webhook'

def packageName = "webhook_ballerina"
def packageOrg = "ayeshalm"
def snapshotVersion = "-SNAPSHOT"
def tomlVersion = project.version.replace("${snapshotVersion}", "")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def originalDependencies = ballerinaDependencyFile.text
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text

configurations {
    jbalTools
    externalJars
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(":java-wrapper")
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }

}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }

    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }

    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }

    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task updateTomlFile {
    doLast {
        def stdlibDependentHttpVersion = project.stdlibHttpVersion.replace("${snapshotVersion}", "")
        def stdlibDependentLogVersion = project.stdlibLogVersion.replace("${snapshotVersion}", "")
        def stdlibDependentWebsubVersion = project.stdlibWebsubVersion.replace("${snapshotVersion}", "")

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)

        // Dynamic version update of external dependencies
        newConfig = newConfig.replace("@netty.version@", project.nettyVersion)
        newConfig = newConfig.replace("@wso2commonspool.version@", project.wso2CommonsPoolVersion)
        newConfig = newConfig.replace("@wso2snakeyaml.version@", project.wso2SnakeYamlVersion)
        newConfig = newConfig.replace("@bouncycastle.version@", project.bouncycastleVersion)
        newConfig = newConfig.replace("@nettytcnative.version@", project.nettyTcnativeVersion)
        newConfig = newConfig.replace("@wso2carbonmetrics.version@", project.wso2CarbonMetricsVersion)
        newConfig = newConfig.replace("@guava.version@", project.guavaVersion)
        newConfig = newConfig.replace("@http.native.version@", project.stdlibHttpVersion)
        ballerinaConfigFile.text = newConfig

        // Dynamic version update of stdlib dependencies
        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.websub.version@", stdlibDependentWebsubVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}



//task ballerinaBuild {
//    inputs.dir file(project.projectDir)
//
//    doLast {
//        // Build and populate caches
//        exec {
//            workingDir project.projectDir
//            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
//            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build ${debugParams} && exit %%ERRORLEVEL%%"
//            } else {
////                commandLine 'sh', '-c', "bal build ${debugParams}"
//                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build ${debugParams}"
//            }
//        }
//        copy {
//            from file("$project.projectDir/target/bala")
//            into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}")
//        }
//        copy {
//            from file("$project.projectDir/target/cache")
//            exclude '**/*-testable.jar'
//            exclude '**/tests_cache/'
//            into file("$artifactCacheParent/cache/")
//        }
//
//        // Doc creation and packing
//        exec {
//            workingDir project.projectDir
//            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
//            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
//            } else {
//                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
//            }
//        }
//        copy {
//            from file("$project.projectDir/target/apidocs/${packageName}")
//            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
//        }
//    }
//
//    outputs.dir artifactCacheParent
//    outputs.dir artifactBallerinaDocs
//    outputs.dir artifactLibParent
//}


unpackJballerinaTools.dependsOn copyToLib
unpackStdLibs.dependsOn unpackJballerinaTools

//ballerinaBuild.dependsOn ":java-wrapper:build"
//ballerinaBuild.dependsOn updateTomlFile
//ballerinaBuild.dependsOn initializeVariables
//ballerinaBuild.finalizedBy revertTomlFile
//build.dependsOn ballerinaBuild
